LVS也是用来做集群的软件，但是功能远远小于nginx，不过LVS是内置在内核里的，贼特么快！
集群最重要的就是调度！它的调度算法有10多种，可是常见的就4种。
 集群的目的：
1.提高性能，如计算密集型应用天气预报，核试验模拟
2.降低成本，相对超级计算机，价格便宜
3.提高可扩展性：只要增加集群节点即可
4.增加可靠性，多个节点完成相同的功能，避免单点失败，就像用户访问网站，多台子服务器里的网站是一模一样的，一台崩了，用户还可以访问别的服务器
 集群的分类：
1.高性能计算集群HPC	解决复杂的科学问题  企业里不做这个
2.负载均衡集群LB   流量的负载在计算机集群中尽可能平均分摊
3.高可用集群HA    避免单点故障，当一个系统发生故障，可以快速迁移

LVS软件只支持4层，也就是ip 和 端口  ，LVS更像一个路由器！转给其他的 ip对应的程序端口
LVS集群分为三大部分：
前端：负载均衡层，由一台或者多台负载调度器构成
中间：服务器群组层，由一组实际运行的服务器组成
底端：数据共享存储层，提供共享存储空间的存储区域，就是客户登陆时访问的数据库，是由单独一台或多台数据库服务器组成，这些数据库服务器连着所有的运行服务器，为他们提供相同的数据！

几个LVS术语
Directory sever 调度服务器
real server 真实运行的服务器
VIP 虚拟IP地址，也就是调度器的网址，用户访问的IP
RIP 真实的运行服务器的IP地址
DIP 调度器连后台的IP  就像proxy有2.5 4.5俩网段的IP，而后台服务器是2.0网段的ip，那么2.5就是DIP
CIP 是客户端的IP

LVS的三种工作模式
NAT：LVS相当于路由器，用户访问LVS服务器，LVS和子服务器通过交换机连接在同一个局域网，LVS转发给后端的子服务器，和路由器的区别是，它有调度算法，不会只给一台机器数据！然后里面的子服务器要返回数据让LVS服务器转发，其中子服务器是内网的IP
TUN：LVS服务器和子服务器不在一个局域网里，是分隔两地的，LVS和子服务器的连接用VPN建立连接，但是这样速度很慢！
DR：基于NAT模式的改进，NAT的LVS服务器的带宽直接影响了整个集群的效率！如果集群流量很大，NAT模式是不可以的！LVS服务器和子服务器都通过交换机连接在同一个局域网里！LVS发送一个用户的请求给子服务器，子服务器处理完请求，直接返回给用户，而不是再交由LVS服务器转发。用户访问请求几乎没有多少流量！

LVS的常见调度算法：
轮询：
加权轮询：和轮询一样也有个缺点，如果一端子服务器的用户连接数减少他们把浏览器关了！还是按轮询处理用户请求，就不能负载均衡了！
最少连接：就是根据子服务器实际处理请求数来安排调度
加权最少连接：加个权重
源地址散列：也就是ip_hash 相同客户端访问相同服务器  

现在来部署使用LVS，在proxy（2.5/4.5）调度服务器上操作
 先安装一个调度LVS的工具，LVS是镶嵌在内核里的，需要一个工具告诉LVS该做什么！yum -y install ipvsadm   
ipvsadm命令选项：
      ipvsadm -A 创建一个集群，公布调度器的IP地址，也就是VIP
	ipvsadm -E 修改集群
	ipvsadm -D 删除一个集群
	ipvsadm -C 清空所有集群所有运行子服务器
      ipvsadm -a 添加运行的子服务器
	ipvsadm -e 修改运行的子服务器
	ipvsadm -d 删除运行的一个子服务器
	ipvsadm -L 查看LVS规则表
	ipvsadm -s rr wrr lc wlc   指定调度算法，轮询，加权轮询，最少连接，加权最少连接
1）创建集群
ipvsadm -A -t 192.168.4.5:80 -s wrr 创建一个集群，调度服务器的IP是192.168.4.5：80端口提供服务，它的调度算法是加权轮询
2）添加运行子服务器
ipvsadm -a -t 192.168.4.5:80 -r 192.168.2.100 -w 1  往这个4.5集群里添加服务器，
添加的是2.100这个服务器，-w是指定这个子服务器的权重， 一个端口是一个集群！
加完了可以ipvsadm -Ln 看一下集群的具体情况，一个TCP表示一个集群
3）修改集群或者子服务器
集群有三种模式，NAT TUN DR这三种模式，如过你创建集群的时候不指定模式，默认是DR（route）模式，那么通过什么选项修改模式呢？
 -g  指定DR模式
 -i  指定TUN模式
 -m  指定NAT模式
 ipvsadm -E -t 192.168.4.5:80 -s rr   -t是指告诉集群用TCP传输协议
 ipvsadm -e -t 192.168.4.5:80 -r 192.168.2.10:80 -w 2  改这个集群里的这个服务器的权重为2
  ipvsadm -e -t 192.168.4.5:80 -r 192.168.2.10:80 -m 改这个子服务器的调度算法为NAT模式
  
打的这些指令默认都不会永久保存，重启就会丢失，所以要 ipvsadm-save -n > /etc/sysconfig/ipvsadm 将配置保存到这个文件下，将会永久保存，这个文件需要自己创建，-n是指将端口以数字显示，不打-n会显示端口号对应的服务名。
4）删除
ipvsadm -D -t 192.168.4.5：3306 删除这个集群
ipvsadm -C   删除所有集群


以下进行真正的LVS实验：
要求如下：
LVS调度服务器proxy eth0:192.168.4.5/24 
                 eth1:192.168.2.5/24
            web1 eth1:192.168.2.100/24   网关192.168.2.5
                      并且要关闭eth0，因为eth0是4网段网卡，和客户端网卡同网段，客户访问请求是发送给4.5的，但是4.5转发给4.100处理后，4.100会因为和客户端同网段，而直接给客户端回复数据，客户端一看回来的数据是4.100，直接就给扔了，因为客户端只要4.5回复！
            web2 eth1:192.168.2.200/24   网关192.168.2.5  这个2.5就是DIP哦！
            client eth0:192.168.4.10/24
nginx工作原理是调度器去找数据，调度器帮用户上网，而调度器同时拥有4网段和2网段的网卡，可以和子服务器要数据，要到的数据再由LVS转发给客户端，所以不涉及到子服务器设置网关一说！而LVS的NAT模式是调度器相当于是路由器，子服务器（2网段）要给客户端（4网段）回复数据，真正上网的人是客户端，而不是LVS调度器了，所以子服务器必须要配置网关！

怎么给子服务器配置网关？nmcli connection modify eth1 ipv4.method manual ipv4.geteway 192.168.2.5  然后再nmcli connection up eth1
                                 
 现在部署web1 web2 的apache或者nginx
1）设置Web服务器（以web1为例）
[root@web1 ~]# yum -y install httpd
[root@web1 ~]# echo "192.168.2.100" > /var/www/html/index.html
2）启动Web服务器软件
[root@web1 ~]# systemctl restart httpd
3)关闭防火墙与SELinux
[root@web1 ~]# systmctl stop firewalld
[root@web1 ~]# setenforce 0

 现在部署调度器proxy NAT模式
1)确认调度器的路由转发功能(如果已经开启，可以忽略)
[root@proxy ~]# echo 1 > /proc/sys/net/ipv4/ip_forward  //先临时设置
[root@proxy ~]# echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
#修改配置文件，设置永久规则
2）确保LVS是唯一集群，先把nginx清了，把varnishd也清了
killall nginx
killall varnishd
3）给LVS添加集群（先做NAT模式） 修改完会立即生效！都不用启动服务什么乱七八糟的！
ipvsadm -A -t 192.168.4.5:80 -s rr
ipvsadm -A -t 192.168.4.5:80 -r 192.168.2.100:80 -m
ipvsadm -A -t 192.168.4.5:80 -r 192.168.2.200:80 -m
4）查看规则列表，并保存规则
[root@proxy ~]# ipvsadm -Ln
[root@proxy ~]# ipvsadm-save -n > /etc/sysconfig/ipvsadm


 现在部署调度器proxy DR模式
 nginx代理的概念是它帮客户端访问web，其实是nginx在访问也就是2.5在访问2.100 然后nginx把找到的页面再给客户端
 LVS可不是代理哦，它只是调度哦。它只是告诉子服务器2.100，这是4.10的访问请求哦，然后2.100通过路由器回复给4.10，所以它子服务器一定不要是和客户端同网段哦，网络通信原则可是谁收到请求谁回复哦
  
 DR模式是为了解决NAT节点的问题，不让proxy一直做转发，让2.100直接给4.10回复，怎么不走proxy直接给客户端回复数据呢？那就是让web1再开个网卡，配个4网段ip 4.100，但是呢，人家4.10客户端特么
只想要4.5的回复，所以阿，就得再给web1配个ip 4.5 假装web1就是4.5  web2也同理哦 4.200+4.5  ，但是现在特么地址冲突了！所以要改web1 web2参数防止冲突，还得特么藏起来，收数据时还得让proxy来干，以上就是DR模式，每台机器都得它吗的配
 给proxy配置VIP和DIP：
1）cd /etc/sysconfig/network-scripts/    #所有的网卡配置文件都在这
  里面有个eth0的网卡配置文件ifcfg-eth0,把这个文件拷贝
  cp ifcfg-eth0{,:0}   !!!!!!!!!  拷贝到当前，并改名加个"：0"
  第一个eth0网卡是4.5不用改，改拷贝出来的网卡vim ifcfg-eth0:0 ，我们nmcli改的网卡信息就是改这个网卡文件
  只留以下信息，其他全不要
  	TYPE=Ethernet    //网卡类型是以太网卡
	BOOTPROTO=none   //你的网卡ip怎么来的，如果写dhcp，它就会自己生成ip，不要写
	NAME=eth0:0      //网卡名字，不能和eth0重复，所以加：0
	DEVICE=eth0:0    //设备名字，不能和eth0重复，所以加：0
	ONBOOT=yes       //当电脑开机的时候，这个网卡要不要激活
	IPADDR=192.168.4.15   //如果你不动态获取ip的话，这个网卡ip是多少
	PREFIX=24        //子网掩码是24
  改完之后，重启一下网络systemctl restart network
ip a s eth0 看下结果
       刚才这些操作是给eth0这个网卡，配了两个ip！客户端ping 4.5 4.15 都是通的！这个4.15用来做VIP 4.5做DIP ，这个VIP一定是配在eth0：0里面，是在正常的eth0下面的，冒号后面可以配任意个IP 如eth0:0 eth0:1 eth0:2，意思都是给这个eth0网卡配多IP的意思
     以上调度器的设置就做完了
2）给web1和web2都配4网段的ip，用于接受proxy转发过来的用户请求，先以web1为例
[root@web1 ~]# nmcli connection modify eth0 ipv4.method manual \
ipv4.addresses 192.168.4.100/24 connection.autoconnect yes
[root@web1 ~]# nmcli connection up eth0
  对于客户来说它访问的是VIP 4.15，你web1想直接给客户回复，也要做一个4.15的假IP，并且这个IP不能对外公布！否则会造成地址冲突，怎么改呢？
   先进入cd /etc/sysconfig/network-scripts/  这回拷贝一个本地回环网卡lo   cp ifcfg-lo ifcfg-lo:0
   然后vim ifcfg-lo:0  修改成下面的信息
   	DEVICE=lo:0             //设备名
	IPADDR=192.168.4.15     //我要伪装4.15
	NETMASK=255.255.255.255 //我的子网掩码，意思没有主机
	NETWORK=192.168.4.15    //我的网络IP
	BROADCAST=192.168.4.15  //整个IP全是广播
	ONBOOT=yes              //开机要不要启动   
	NAME=lo:0               //网卡名
   然后这个操作在web2做一遍！内容一模一样！
   当前操作不满足需求，因为当交换机发广播找4.15的时候，是4.15的机器全都给回应，然后交换机会把对应的机器MAC地址记录下来，或者web1 web2去找别人的时候也会告诉交换机它是4.15 所以既不能被广播找到，也不能主动找交换机让它记录，该怎么做呢？
   vim /etc/sysctl.conf    手动写入如下4行内容
net.ipv4.conf.all.arp_ignore = 1    当有人问arp广播，我拒绝回应
net.ipv4.conf.lo.arp_ignore = 1     
net.ipv4.conf.lo.arp_announce = 2   我自己也不会主动发arp广播
net.ipv4.conf.all.arp_announce = 2  
  打完之后敲一条命令sysctl -p  这个配置文件立即生效！  web2再做相同的操作
  然后web1 web2就可以重启网卡了systemctl restart network

最后回到调度器上打规则！先清空所有规则ipvsadm -C再新建
 ipvsadm -A -t 192.168.4.15:80 -s wrr
 ipvsadm -a -t 192.168.4.15:80 -r 192.168.4.100 -g -w 1
 ipvsadm -a -t 192.168.4.15:80 -r 192.168.4.200 -g -w 1

——————————————————————————————————————————————————————————————————————————————————————————————



















