shell脚本：脚本是可以执行的一个文件，实现某种功能
shell脚本的组成：
	#!解释器声明
	#注释文本
	可执行代码
案例：编写一个问候脚本
	vim /root/1.sh
		#!/bin/bash
		echo hello world
		cat /etc/redhat-release
		ifconfig | head -2
	给该文件赋予可执行权限：chmod +x /root/1.txt
	输入/root/1.sh执行该脚本
重定向输出在脚本里的应用：
	>只收集前面命令的正确输出
	2>只收集前面命令的错误输出	
	&>收集前面命令的全部输出
		例：
		#!/bin/bash
		cat /root/1.txt > /opt/b.txt #1.txt脚本是正确的，将其输出结果重定向写入后者
变量：为了让脚本增加灵活度，适应多变的环境，使用变量
	变量是一个容器，以不变的名称存放可以变化的值
	定义变量：		
		变量名=存放的值  例：a=100
黑洞设备：/dev/null 将所有内容自动销毁
实验：书写一个创建用户的脚本，并且设置密码
	vim /root/2.sh
		#!/bin/bash
		a=nsd01
		useradd $a &> /dev/null
		echo  "用户$a创建成功"
		echo 123 | passwd --stdin $a &> /dev/null
		echo "用户$a密码设置成功"
	chmod +x /root/2.txt
	其中$是引用变量的值如果变量名很长也可以${asd}来引用
	设置变量时的注意事项：
		变量名只能由字母，数字，下划线组成，区分大小写；
		变量名不能以数字开头，不能使用关键字和特殊字符；
		若指定的变量名已经存在，再为其赋值相当于重新定义变量；
		定义变量时等号两边不能有空格。
取消特殊字符意义的方法：
	使用 ' ' 符号
	例：echo '$a' 会直接输出$a，不加' '，会输出这个变量的值
使用` `或$( ) 可以将里面命令的输出结果，直接用于参与其它命令的运行
	例：mkdir /opt/nsd$(date +%F)
环境变量：变量名一般都大写，有特定的意义，由系统定义完成，直接调用即可
	USER：存储的是当前登陆系统的用户名
位置变量：bash解释器内置的变量，存储的是执行脚本时，命令行里提供的参数
	$1:执行脚本时，命令行提供的第一个参数
	${10}：执行脚本时，命令行提供的第10个参数
		例：vim /a.sh
		#!/bin/bash
		useradd $1 &> /dev/null
		echo 123 | passwd --stdin $1 &> /dev/null
		当用户执行该脚本时输入 bash /a.sh a ，a就是$1的值，就会自动创建a用户，并为a用户设置密码
read -p '' 变量名：产生交互，自动记录用户的输入，自动将记录的值赋值给一个变量
	例：vim /b.sh
	#!/bin/bash
	read -p '请输入用户名' a
	useradd $a &> /dev/null
	当用户执行脚本的时候，会显示‘请输入用户名’并且用户可以输入内容，该内容就会赋值给变量a
预定义变量：bash内置，可直接调用的特殊值，不能修改
	$#：代表shell程序所有参数的个数
	$*：显示所有变量的值
	$?：程序退出后的状态值 0是正常，非0数是异常
	$*与$@：代表所有参数的内容
	$0：代表当前shell程序的文件名称
条件测试[ 测试表达式 ]
	常用的测试选项，用于检查文档的状态：
	-e：文档存在为真
	-d：文档存在，且是目录为真
	-f：文档存在，且是文件为真
	-r：文档存在，且有可读权限为真
	-w：文档存在，且有可写权限为真
	-x：文档存在，且有可执行权限为真
		例：
		输入 [ -e /etc ] 再输入 echo $? 查看是否为真
	常用的比较整数大小：
	-gt：大于
	-ge：大于等于
	-eq：等于
	-ne：不等于
	-lt：小于
	-le：小于等于	
		例：
		输入 [ 1 -eq $a ] 再输入echo $?	 
	 常用的字符串比较：
	==：相等一致为真
	!=：不相等为真
		例：
		[ student == root ];echo $?
if选择结构：
	if双分支处理，如果满足if的条件测试，则执行命令1，不满足执行命令2
		if [ 条件测试 ]；then
		执行命令1
		else
		执行命令2
		fi
	if多分支处理，elif可以是多个
		if [];then
		执行命令1
		elif [];then
		执行命令2
		else	
 		执行命令3
for循环结构：根据一个值列表，将其赋值给变量，并重复赋值，以此循环执行命令
	#!/bin/absh	
	for 变量名 in 值列表
	do
	执行命令
	done
		例：
		#!/bin/bash		
		for i in 1 2 3 4
		do
		useradd $a &> /dev/null
		done
造数工具：{起始点..结束点}生成起始点到结束点的所有数字
	for i in {1..15}
shell脚本：
	如何判定错误输出：>&2和exit返回值
	例：
	if [ $# -eq 0 ];then
	echo "您没有输入参数" >&2  #将其定义为错误输出
	exit 2     #定义返回值，只有返回值是非0才是异常
实验：写一个让客户输入文件名，文件里面是用户名，自动创建其文件里的用户
	#!/bin/bash
	if [ $# -eq 0 ];then
	 echo '' >&2
	 exit 3
	elif [ -f $1 ];then
	 for i in $(cat $1)
	   do
	     useradd $a &> /dev/null
	     echo "$a 创建成功"
	   done
	else
	  echo "创建失败" >&2
	  exit 4
	fi 	  

${x:-30} #这个是看x有没有值，有值就返回x的值，没有就返回30
#sed '3d;6a hello' a.txt #d指令是删除，a指令是追加

	












